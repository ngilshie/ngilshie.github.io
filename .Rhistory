install.packages("dplyr")
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, comment = NULL, collapse = TRUE, warning = FALSE, message = FALSE, cache = TRUE, include = TRUE)
install.packages("knitr")
# read in dataset for HSFO and Brent crude oil prices
price_data <- read.csv("../data/historical_data.csv", header = TRUE, sep = ";")
# load required libraries for data wrangling and visualisation
lapply(list("ggplot2", "dplyr", "tidyr", "lubridate"), FUN = library, character.only = TRUE)
install.packages("ggplot2")
# load required libraries for data wrangling and visualisation
lapply(list("ggplot2", "dplyr", "tidyr", "lubridate"), FUN = library, character.only = TRUE)
install.packages("tidyr")
# load required libraries for data wrangling and visualisation
lapply(list("ggplot2", "dplyr", "tidyr", "lubridate"), FUN = library, character.only = TRUE)
install.packages("lubridate")
# load required libraries for data wrangling and visualisation
lapply(list("ggplot2", "dplyr", "tidyr", "lubridate"), FUN = library, character.only = TRUE)
price_data %>%
mutate(date2 = dmy(date)) %>%
gather(brent:HSFO, key = type, value = price) %>%
ggplot(aes(x = date2, y = price)) +
geom_line(aes(linetype = type, color = type), size = 0.5) +
labs(x = "Time", y = "Price (USD per bbl)") +
scale_color_discrete(name = "Series", labels = c("Brent", "HSFO")) +
scale_linetype_discrete(name = "Series", labels = c("Brent", "HSFO")) +
scale_x_date(date_breaks = "6 months", date_labels = "%d %b %y") +
scale_y_continuous(breaks = seq(20, 130, 20)) +
theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 14), legend.text = element_text(size = 12))
install.packages("tseries")
install.packages("readr")
install.packages("kableExtra")
install.packages("urca")
install.packages("blogdown")
servr::jekyll()
knitr::opts_chunk$set(echo = TRUE, comment = NULL, collapse = TRUE, warning = FALSE, message = FALSE, cache = TRUE, include = TRUE)
price_data <- read.csv("../data/historical_data.csv", header = TRUE, sep = ";")
servr::jekyll()
knitr::opts_chunk$set(echo = TRUE, comment = NULL, collapse = TRUE, warning = FALSE, message = FALSE, cache = TRUE, include = TRUE)
# read in dataset for HSFO and Brent crude oil prices
price_data <- read.csv("../data/historical_data.csv", header = TRUE, sep = ";")
# load required libraries for data wrangling and visualisation
lapply(list("ggplot2", "dplyr", "tidyr", "lubridate"), FUN = library, character.only = TRUE)
# create exploratory plot of price data
price_data %>%
mutate(date2 = dmy(date)) %>%
gather(brent:HSFO, key = type, value = price) %>%
ggplot(aes(x = date2, y = price)) +
geom_line(aes(linetype = type, color = type), size = 0.5) +
labs(x = "Time", y = "Price (USD per bbl)") +
scale_color_discrete(name = "Series", labels = c("Brent", "HSFO")) +
scale_linetype_discrete(name = "Series", labels = c("Brent", "HSFO")) +
scale_x_date(date_breaks = "6 months", date_labels = "%d %b %y") +
scale_y_continuous(breaks = seq(20, 130, 20)) +
theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 14), legend.text = element_text(size = 12))
lapply(list("tseries", "readr", "knitr", "kableExtra"), FUN = library, character.only = TRUE)
# test individual series for unit roots (null: unit root present)
(adf_results <- lapply(list(price_data$HSFO, price_data$brent), FUN = adf.test))
adf_df <- data.frame(
var = c("HSFO", "Brent"),
null = rep("unit root present", 2),
lag = c(parse_integer(adf_results[[1]][2]$parameter), parse_integer(adf_results[[2]][2]$parameter)),
test = c(parse_number(adf_results[[1]]$statistic), parse_number(adf_results[[2]]$statistic)),
p = c(adf_results[[1]]$p.value, adf_results[[2]]$p.value)
)
adf_df %>% kable("html",
col.names = c("Variable", "Null hypothesis*", "Lag order", "Test statistic", "p-value"),
digits = 3, align = "c",
caption = "Table 1: Augmented Dickey-Fuller test results for HSFO and Brent crude oil prices") %>%
kable_styling() %>%
add_footnote(label = "The alternative hypothesis in both tests is that the series is trend-stationary.",
notation = "symbol")
library(urca)
# perform Johansen test for cointegration (null: rank is zero i.e. no cointegrating relationships)
vecm.jo <- ca.jo(price_data[c('brent','HSFO')], type = "eigen", ecdet = 'const', spec = "transitory", K = 2)
summary(vecm.jo)
johansen_df <- data.frame(
row = c(1, 2), null = c("$r = 0$", "$r \\leq 1$"), test = c(63.52, 2.19),
ten = c(13.75, 7.52), five = c(15.67, 9.24), one = c(20.20, 12.97)
)
johansen_df %>% kable("html",
col.names = c("Row", "Null hypothesis", "Test statistic", "10%", "5%", "1%"), align = "c",
caption = "Table 2: Johansen cointegration test results for HSFO and Brent crude oil prices") %>%
kable_styling() %>%
add_header_above(header = c("\\s" = 3, "Critical values" = 3)) %>%
add_footnote(label = "$r$ above represents the number of cointegrating relationships. The maximal eigenvalue test statistic was used, along with a constant (but no linear trend).", notation = "symbol")
# estimate the cointegrating vector
coint.lm <- lm(brent ~ HSFO, data = price_data)
coint.lm$coefficients
# create data frame to store regressors for eq. 4
price_data2 <- price_data %>% mutate(
brent.d = brent - lag(brent), HSFO.d = HSFO - lag(HSFO),
brent.dl1 = lag(brent.d), HSFO.dl1 = lag(HSFO.d),
ecm = resid(coint.lm), ecm.l1 = lag(ecm)
)
# estimate VECM equation for HSFO price
(HSFO.vecm <- lm(HSFO.d ~ brent.d + HSFO.dl1 + brent.dl1 + ecm.l1, data = price_data2))
vecm_df <- data.frame(
row = 1:5, regressor = c("$\\gamma_0$", "$\\Delta B_t$", "$\\Delta H_{t-1}$",
"$\\Delta B_{t-1}$", "$u_{t-1}$"),
estimate = HSFO.vecm$coefficients,
se = summary(HSFO.vecm)$coefficients[,2],
test = summary(HSFO.vecm)$coefficients[,3],
p = summary(HSFO.vecm)$coefficients[,4],
significance = c("","***","","","***")
)
vecm_df %>% kable("html", row.names = FALSE, align = "c", digits = 3,
col.names = c("Row", "Regressor", "Estimate", "Std. error", "$t$-statistic", "$p$-value", "Significance"),
caption = "Table 3: OLS regression results for the VECM equation for HSFO price") %>%
kable_styling() %>%
add_footnote(label = "$N = 1485$. Adjusted multiple $R^2 = 0.0465$. $^{***}$ denotes significance at the 1% level.", notation = "symbol")
# divide plotting window into two columns
par(mfrow = c(1, 2))
# draw residual and quantile-quantile plots
plot(HSFO.vecm, which = 1)
plot(HSFO.vecm, which = 2)
# read in EIA's projection of future Brent prices
brent_data <- read.csv("../data/brent_projection.csv", header = TRUE, sep = ",")
# print table showing snapshot of data
library(stringr)
brent_data %>% slice(c(1:3, 32:34)) %>% mutate(date = str_replace(date, "Dec-", "20"), brent = round(brent, 2)) %>%
add_row(date = "$\\vdots$", brent = "$\\vdots$", .before = 4) %>%
kable("html", row.names = FALSE, align = "c", col.names = c("Year", "Brent price (US$/bbl)"),
caption = "Table 4: EIA's projection of annual Brent crude oil prices (2017-2050)") %>%
kable_styling()
# store Brent price for last 3 days of historical data
brent <- c(tail(price_data$brent, n = 3))
# add interpolation between last day of historical data and first day of projected data
brent <- c(brent[1:2], approx(c(tail(price_data$brent, n = 1), brent_data$brent[1]), n = 4)$y)
# add interpolation between rest of projeced data
for (i in 1:(dim(brent_data[1])-1)) {
brent <- c(brent, approx(brent_data$brent[i:(i+1)], n = 13)$y[-1])
}
# create empty data frame for the projection
proj <- data.frame(brent = brent, HSFO = c(tail(price_data$HSFO, n = 3), rep(NA, length(brent)-3)),
brent.d = rep(NA, length(brent)), HSFO.d = rep(NA, length(brent)),
ecm = rep(NA, length(brent)))
# compute projection for first 3 rows
proj$ecm[1:3] <- brent[1:3] - coint.lm$coefficients[2]*proj$HSFO[1:3] - coint.lm$coefficients[1]
proj$brent.d[2:3] <- c(brent[2]-brent[1], brent[3]-brent[2])
proj$HSFO.d[2:3] <- c(proj$HSFO[2]-proj$HSFO[1], proj$HSFO[3]-proj$HSFO[2])
# compute rest of projection using fitted VECM parameters
for (i in 4:(dim(proj)[1])) {
proj$brent.d[i] <- brent[i] - brent[i-1]
proj$HSFO.d[i] <- HSFO.vecm$coefficients[1] + HSFO.vecm$coefficients[2]*proj$brent.d[i] +
HSFO.vecm$coefficients[4]*proj$brent.d[i-1] + HSFO.vecm$coefficients[3]*proj$HSFO.d[i-1] +
HSFO.vecm$coefficients[5]*proj$ecm[i-1]
proj$HSFO[i] <- proj$HSFO[i-1] + proj$HSFO.d[i]
proj$ecm[i] <- brent[i] - coint.lm$coefficients[2]*proj$HSFO[i] - coint.lm$coefficients[1]
}
# add dates to projected data
proj$date <- dmy(c(rep(NA, 3), "1-Oct-17", "1-Nov-17", "1-Dec-17",
t(sapply(c("1-Jan-", "1-Feb-", "1-Mar-", "1-Apr-", "1-May-", "1-Jun-",
"1-Jul-", "1-Aug-", "1-Sep-", "1-Oct-", "1-Nov-", "1-Dec-"),
function(month) paste0(month, 18:50)))))
# filter the first observation in every month of the historical data
proj_df <- price_data %>% separate(date, into = c("day", "month_year"),
sep = "(?<=[0-9])-", remove = FALSE) %>%
group_by(month_year) %>% slice(1) %>% mutate(date = dmy(date)) %>%
arrange(date) %>% ungroup() %>% dplyr::select(date, brent, HSFO) %>%
bind_rows(proj[-c(1,2,3), ])
# distinguish between observed and projected values
proj_df <- proj_df %>% mutate(
brent_obs = ifelse(date < "2017-10-1", brent, NA),
HSFO_obs = ifelse(date < "2017-10-1", HSFO, NA),
brent_proj = ifelse(date < "2017-10-1", NA, brent),
HSFO_proj = ifelse(date < "2017-10-1", NA, HSFO)
)
# plot historical and projected values
proj_df %>% dplyr::select(-brent, -HSFO) %>%
gather(brent_obs:HSFO_proj, key = Type, value = price) %>%
ggplot(aes(x = date, y = price)) +
geom_line(aes(linetype = Type, color = Type), size = 0.5) +
labs(x = "Year", y = "Price (USD per bbl)") +
annotate("segment", x = as.Date("2017-10-1"), xend = as.Date("2017-10-1"),
y = -Inf, yend = Inf, linetype = "dotted", size = 0.7) +
annotate("segment", x = as.Date("2050-12-1"), xend = as.Date("2050-12-1"),
y = -Inf, yend = Inf, linetype = "dotted", size = 0.7) +
annotate("text", x = as.Date("2034-6-1"), y = 107, label = "EIA's projection",
size = 5, angle = 13) +
annotate("text", x = as.Date("2034-6-1"), y = 25,
label = "projection horizon (Oct 2017 - Dec 2050)", size = 5) +
scale_x_date(date_breaks = "2 years", date_labels = "%Y") +
scale_y_continuous(breaks = seq(20, 130, 20)) +
scale_color_manual(values = c("#F8766D", "#F8766D", "#00BFC4", "#00BFC4"),
breaks = c("brent_obs", "HSFO_obs"),
labels = c("Brent", "HSFO")) +
scale_linetype_manual(values = c(1,2,1,2),
breaks = c("brent_obs", "HSFO_obs"),
labels = c("Brent", "HSFO")) +
theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 14), legend.text = element_text(size = 12))
# fit VECM to first 750 observations
HSFO.vecm2 <- lm(HSFO.d ~ brent.d + HSFO.dl1 + brent.dl1 + ecm.l1, data = price_data2[1:750,])
# create empty data frame for projection
back_proj <- data.frame(brent = price_data$brent[748:1487], HSFO = price_data$HSFO[748:1487],
brent.d = rep(NA, 740), HSFO.d = rep(NA, 740), ecm = rep(NA, 740))
# compute projection for first 3 rows
back_proj$ecm[1:3] <- back_proj$brent[1:3] - coint.lm$coefficients[2]*back_proj$HSFO[1:3] -
coint.lm$coefficients[1]
back_proj$brent.d[2:3] <- c(back_proj$brent[2]-back_proj$brent[1], back_proj$brent[3]-back_proj$brent[2])
back_proj$HSFO.d[2:3] <- c(back_proj$HSFO[2]-back_proj$HSFO[1], back_proj$HSFO[3]-back_proj$HSFO[2])
# compute rest of projection using fitted VECM parameters
for (i in 4:(dim(back_proj)[1])) {
back_proj$brent.d[i] <- back_proj$brent[i] - back_proj$brent[i-1]
back_proj$HSFO.d[i] <- HSFO.vecm2$coefficients[1] + HSFO.vecm2$coefficients[2]*back_proj$brent.d[i] +
HSFO.vecm2$coefficients[4]*back_proj$brent.d[i-1] +
HSFO.vecm2$coefficients[3]*back_proj$HSFO.d[i-1] +
HSFO.vecm2$coefficients[5]*back_proj$ecm[i-1]
back_proj$HSFO[i] <- back_proj$HSFO[i-1] + back_proj$HSFO.d[i]
back_proj$ecm[i] <- back_proj$brent[i] - coint.lm$coefficients[2]*back_proj$HSFO[i] - coint.lm$coefficients[1]
}
# add fitted data to data frame
price_data3 <- price_data
price_data3$fitted_diff <- c(NA, NA, fitted(HSFO.vecm2), rep(NA, 1487-750))
price_data3 <- price_data3 %>% mutate(fitted = HSFO + fitted_diff)
# add back-testing projection to data frame
price_data3$pred <- c(rep(NA, 750), back_proj$HSFO[-c(1,2,3)])
# plot fitted and predicted data
price_data3 %>% mutate(date2 = dmy(date)) %>% dplyr::select(date2, brent, HSFO, fitted, pred) %>%
gather(brent:pred, key = Type, value = price) %>%
mutate(Type = factor(Type, levels = c("brent", "HSFO", "fitted", "pred"))) %>%
ggplot(aes(x = date2, y = price)) +
geom_line(aes(group = Type, color = Type, linetype = Type), size = 0.5) +
labs(x = "Time", y = "Price (USD per bbl)") +
annotate("segment", x = as.Date("2011-11-1"), xend = as.Date("2011-11-1"),
y = -Inf, yend = Inf, linetype = "dotted", size = 0.7) +
annotate("segment", x = as.Date("2014-10-20"), xend = as.Date("2014-10-20"),
y = -Inf, yend = Inf, linetype = "dotted", size = 0.7) +
annotate("segment", x = as.Date("2017-9-19"), xend = as.Date("2017-9-19"),
y = -Inf, yend = Inf, linetype = "dotted", size = 0.7) +
annotate("text", x = as.Date("2013-3-1"), y = 40, label = "training set", size = 5) +
annotate("text", x = as.Date("2016-7-1"), y = 110, label = "test set", size = 5) +
scale_x_date(date_breaks = "6 months", date_labels = "%d %b %y") +
scale_y_continuous(breaks = seq(20, 130, 20)) +
scale_color_manual(values = c("#F8766D", "#00BFC4", "#7CAE00", "#C77CFF"),
labels = c("Brent", "actual HSFO", "fitted HSFO", "predicted HSFO")) +
scale_linetype_manual(values = c("solid", "solid", "dashed", "dashed"),
labels = c("Brent", "actual HSFO", "fitted HSFO", "predicted HSFO")) +
theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 14), legend.text = element_text(size = 12))
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
knitr::opts_chunk$set(echo = TRUE, comment = NULL, collapse = TRUE, warning = FALSE, message = FALSE, cache = TRUE, include = TRUE)
price_data %>%
mutate(date2 = dmy(date)) %>%
gather(brent:HSFO, key = type, value = price) %>%
ggplot(aes(x = date2, y = price)) +
geom_line(aes(linetype = type, color = type), size = 0.5) +
ggtitle("Fig.1 Historical HSFO and Brent crude oil prices (1 Nov 2011 - 19 Sep 2017)") +
labs(x = "Time", y = "Price (USD per bbl)") +
scale_color_discrete(name = "Series", labels = c("Brent", "HSFO")) +
scale_linetype_discrete(name = "Series", labels = c("Brent", "HSFO")) +
scale_x_date(date_breaks = "6 months", date_labels = "%d %b %y") +
scale_y_continuous(breaks = seq(20, 130, 20)) +
theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 14), legend.text = element_text(size = 12),
title = element_text(size = 16))
# read in dataset for HSFO and Brent crude oil prices
price_data <- read.csv("../data/historical_data.csv", header = TRUE, sep = ";")
# load required libraries for data wrangling and visualisation
lapply(list("ggplot2", "dplyr", "tidyr", "lubridate"), FUN = library, character.only = TRUE)
# create exploratory plot of price data
price_data %>%
mutate(date2 = dmy(date)) %>%
gather(brent:HSFO, key = type, value = price) %>%
ggplot(aes(x = date2, y = price)) +
geom_line(aes(linetype = type, color = type), size = 0.5) +
ggtitle("Fig.1 Historical HSFO and Brent crude oil prices (1 Nov 2011 - 19 Sep 2017)") +
labs(x = "Time", y = "Price (USD per bbl)") +
scale_color_discrete(name = "Series", labels = c("Brent", "HSFO")) +
scale_linetype_discrete(name = "Series", labels = c("Brent", "HSFO")) +
scale_x_date(date_breaks = "6 months", date_labels = "%d %b %y") +
scale_y_continuous(breaks = seq(20, 130, 20)) +
theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 14), legend.text = element_text(size = 12),
title = element_text(size = 16))
# divide plotting window into two columns
par(mfrow = c(1, 2))
# draw residual and quantile-quantile plots
plot(HSFO.vecm, which = 1)
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
